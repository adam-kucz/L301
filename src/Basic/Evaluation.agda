{-# OPTIONS --exact-split --prop #-}
module Basic.Evaluation where

import Basic.Expression as Expr
open Expr using (ArithExpr; BoolExpr; Value; Variable; ArithOp; BoolOp; ArithmBoolOp)
open ArithExpr
open BoolExpr
module Aop = ArithOp
module Bop = BoolOp
module ABop = ArithmBoolOp
open import Basic.Class

open import PropUniverses
open import Proposition.Empty
open import Proposition.Identity
open import Proposition.Decidable
open import Data.Int
open import Data.Bool
open import Data.List hiding (_++_)
open import Data.Collection
open import Data.Collection.Listable.Function
open import Logic hiding (‚ä•-recursion)

aeval-in-ctx : (œÉ : Variable ‚Üí ‚Ñ§)(a : ArithExpr) ‚Üí ‚Ñ§
aeval-in-ctx œÉ (avar v) = œÉ v
aeval-in-ctx œÉ (aval n) = n
aeval-in-ctx œÉ (op Aop.+ a‚ÇÄ a‚ÇÅ) = aeval-in-ctx œÉ a‚ÇÄ + aeval-in-ctx œÉ a‚ÇÅ
aeval-in-ctx œÉ (op Aop.- a‚ÇÄ a‚ÇÅ) = aeval-in-ctx œÉ a‚ÇÄ - aeval-in-ctx œÉ a‚ÇÅ
aeval-in-ctx œÉ (op Aop.* a‚ÇÄ a‚ÇÅ) = aeval-in-ctx œÉ a‚ÇÄ * aeval-in-ctx œÉ a‚ÇÅ

aeval : (a : ArithExpr)(p : fv a =‚àÖ) ‚Üí ‚Ñ§

private
  combine-with :
    (op : (x y : ‚Ñ§) ‚Üí ‚Ñ§)
    (a‚ÇÄ a‚ÇÅ : ArithExpr)
    (p : fv a‚ÇÄ ++ fv a‚ÇÅ =‚àÖ)
    ‚Üí -----------------------
    ‚Ñ§
  combine-with _‚àô_ a‚ÇÄ a‚ÇÅ p =
    aeval a‚ÇÄ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l' = fv a‚ÇÅ}) (‚à®left q))})
    ‚àô
    aeval a‚ÇÅ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l = fv a‚ÇÄ}) (‚à®right q))})

aeval (avar v) p = ‚ä•-recursion ‚Ñ§ (p (v , x‚ààx‚à∑ []))
aeval (aval n) p = n
aeval (op Aop.+ a‚ÇÄ a‚ÇÅ) p = combine-with _+_ a‚ÇÄ a‚ÇÅ p
aeval (op Aop.- a‚ÇÄ a‚ÇÅ) p = combine-with _-_ a‚ÇÄ a‚ÇÅ p
aeval (op Aop.* a‚ÇÄ a‚ÇÅ) p = combine-with _*_ a‚ÇÄ a‚ÇÅ p

beval-in-ctx : (œÉ : Variable ‚Üí ‚Ñ§)(b : BoolExpr) ‚Üí Bool
beval-in-ctx œÉ (bval b) = b
beval-in-ctx œÉ (¬¨ b) = not (beval-in-ctx œÉ b)
beval-in-ctx œÉ (bop Bop.‚àß b‚ÇÄ b‚ÇÅ) = beval-in-ctx œÉ b‚ÇÄ and beval-in-ctx œÉ b‚ÇÅ
beval-in-ctx œÉ (bop Bop.‚à® b‚ÇÄ b‚ÇÅ) = beval-in-ctx œÉ b‚ÇÄ or beval-in-ctx œÉ b‚ÇÅ
beval-in-ctx œÉ (abop ABop.== a‚ÇÄ a‚ÇÅ) = to-bool (aeval-in-ctx œÉ a‚ÇÄ == aeval-in-ctx œÉ a‚ÇÅ)
beval-in-ctx œÉ (abop ABop.< a‚ÇÄ a‚ÇÅ) = to-bool (aeval-in-ctx œÉ a‚ÇÄ < aeval-in-ctx œÉ a‚ÇÅ)

beval : (b : BoolExpr)(p : fv b =‚àÖ) ‚Üí Bool

private
  b-combine-with-a :
    (op : (x y : ‚Ñ§) ‚Üí ùí∞ ·µñ)
    ‚¶É _ : ‚àÄ {x y} ‚Üí Decidable (op x y) ‚¶Ñ
    (a‚ÇÄ a‚ÇÅ : ArithExpr)
    (p : fv a‚ÇÄ ++ fv a‚ÇÅ =‚àÖ)
    ‚Üí -----------------------
    Bool
  b-combine-with-a _‚àô_ a‚ÇÄ a‚ÇÅ p = to-bool (
    aeval a‚ÇÄ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l' = fv a‚ÇÅ}) (‚à®left q))})
    ‚àô
    aeval a‚ÇÅ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l = fv a‚ÇÄ}) (‚à®right q))})
    )

  b-combine-with-b :
    (op : (b‚ÇÄ b‚ÇÅ : Bool) ‚Üí Bool)
    (b‚ÇÄ b‚ÇÅ : BoolExpr)
    (p : fv b‚ÇÄ ++ fv b‚ÇÅ =‚àÖ)
    ‚Üí -----------------------
    Bool
  b-combine-with-b _‚àô_ b‚ÇÄ b‚ÇÅ p =
    beval b‚ÇÄ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l' = fv b‚ÇÅ}) (‚à®left q))})
    ‚àô
    beval b‚ÇÅ
      (Œª { (v , q) ‚Üí p (v , ‚üµ (++-prop {l = fv b‚ÇÄ}) (‚à®right q))})

beval (bval b) p = b
beval (¬¨ b) p = not (beval b p)
beval (bop Bop.‚àß b‚ÇÄ b‚ÇÅ) p = b-combine-with-b _and_ b‚ÇÄ b‚ÇÅ p
beval (bop Bop.‚à® b‚ÇÄ b‚ÇÅ) p = b-combine-with-b _or_ b‚ÇÄ b‚ÇÅ p
beval (abop ABop.== a‚ÇÄ a‚ÇÅ) p = b-combine-with-a _==_ a‚ÇÄ a‚ÇÅ p
beval (abop ABop.< a‚ÇÄ a‚ÇÅ) p = b-combine-with-a _<_ a‚ÇÄ a‚ÇÅ p

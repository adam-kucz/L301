{-# OPTIONS --exact-split --prop #-}
module PureCCS.Translation where

import PureCCS.Definition as Pure
import CalculusOfCommunicatingSystems as CCS

open import Universes
open import Type.Sum hiding (_,_)
open import Proposition.Decidable using (if_then_else_)
open import Proposition.Identity
open import Data.Nat
open import Data.Int
open import Data.Bool
open import Data.Collection
open import Data.Collection.Listable.Function
open import Data.List
open import Logic
open import Basic

hat :
  (p : CCS.Process)
  (q : closed p)
  ‚Üí ----------------------------------
  Pure.Process ùí∞‚ÇÄ (CCS.Channel √ó Value) (CCS.ProcessIdentifier √ó List ‚Ñï)
hat CCS.nil q = Pure.nil
hat (CCS.œÑ‚ü∂ p) q = Pure.œÑ Pure.,, hat p q
hat (Œ± CCS.! a ‚ü∂ p) q =
  Pure.compl (Œ± Œ£., mk-val (aeval a
    Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l' = fv p}) (‚à®left p'))}))
  Pure.,,
  hat p Œª { (x , p') ‚Üí q (x , ‚üµ ++-prop (‚à®right p'))}
hat (Œ± CCS.‚Åá x ‚ü∂ p) q =
  Pure.‚àë ‚Ñ§ , Œª m ‚Üí
    Pure.name (Œ± Œ£., mk-val m) Pure.,,
    hat (p [[ mk-val m / x ]]) Œª { (elem , p) ‚Üí {!!}}
hat (b CCS.‚ü∂ p) q =  if (b' == true)
    then (hat p Œª { (x , p') ‚Üí q (x , ‚üµ ++-prop (‚à®right p'))})
    else Pure.nil
  where b' = beval b Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l' = fv p}) (‚à®left p'))}
hat (p‚ÇÄ CCS.+ p‚ÇÅ) q = Pure.‚àë Bool , Œª { true ‚Üí p‚ÇÄ' ; false ‚Üí p‚ÇÅ'}
  where p‚ÇÄ' = hat p‚ÇÄ Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l' = fv p‚ÇÅ}) (‚à®left p'))}
        p‚ÇÅ' = hat p‚ÇÅ Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l = fv p‚ÇÄ}) (‚à®right p'))}
hat (p‚ÇÄ CCS.‚à• p‚ÇÅ) q = p‚ÇÄ' Pure.‚à• p‚ÇÅ'
  where p‚ÇÄ' = hat p‚ÇÄ Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l' = fv p‚ÇÅ}) (‚à®left p'))}
        p‚ÇÅ' = hat p‚ÇÅ Œª { (x , p') ‚Üí q (x , ‚üµ (++-prop {l = fv p‚ÇÄ}) (‚à®right p'))}
hat (p CCS.\\ L) q = hat p q Pure.\\ {!!}
hat (p CCS.[ f ]) q = {!!}
hat (P CCS.‚ü¶ a ‚üß) q = Pure.Pid (P Œ£., {!!})
  where all-a-closed :
          (x : ArithExpr)
          (p : x ‚àà a)
          ‚Üí --------------------
          closed x
        all-a-closed x p (v , q') = {!!}
